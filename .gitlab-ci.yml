stages:
- setup
- test
- build

image: elixir:1.6-alpine

services:
  - postgres:9.6-alpine

variables:
  MIX_ENV: test

before_script:
  - mix local.rebar --force
  - mix local.hex --force
  - mix deps.get --all, compile

cache:
  key: "v1-$CI_COMMIT_REF_SLUG"
  policy: pull
  paths:
    - _build
    - deps

pull dependencies:
  stage: setup
  cache:
    key: "v1-$CI_COMMIT_REF_SLUG"
    policy: pull-push
    paths:
      - _build
      - deps
  before_script:
    - mix local.rebar --force
    - mix local.hex --force
  script: |
    mix do deps.get --all, compile

run tests:
  stage: test
  script: |
    mix test --cover
  coverage: '/\[TOTAL\]\s*\d+\.\d+%/'

static code analysis:
  stage: test
  allow_failure: true
  script: |
    mix credo --verbose

docker build:
  stage: build
  image: docker:stable
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://localhost:2375
    MIX_ENV: prod
  before_script:
    - apk add --no-cache git
    - docker version
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script: |
    SHORT_GIT_SHA=$(git rev-parse --short $CI_COMMIT_SHA)
    SHA_TAG="$CI_REGISTRY_IMAGE:$SHORT_GIT_SHA"
    BRANCH_TAG="$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"

    docker pull $BRANCH_TAG || true
    
    docker build --cache-from $BRANCH_TAG -t $SHA_TAG .
    docker push $SHA_TAG

    docker tag $SHA_TAG $BRANCH_TAG
    docker push $BRANCH_TAG

    if [ "${CI_COMMIT_REF_NAME}" == "master" ]; then
      LATEST_TAG="$CI_REGISTRY_IMAGE:latest"
      docker tag $SHA_TAG $LATEST_TAG
      docker push $LATEST_TAG
    fi

